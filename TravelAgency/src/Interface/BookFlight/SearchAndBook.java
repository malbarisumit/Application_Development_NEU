/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.BookFlight;

import Business.Airline;
import Business.Airplane;
import Business.AirplaneFleet;
import Business.FleetSchedule;
import Business.Person;
import Business.PlaneDetails;
import Business.TravelAgency;
import Interface.*;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;


public class SearchAndBook extends javax.swing.JPanel {

    private TravelAgency travelAgency;
    private JPanel userProcessContainer;

    public SearchAndBook(JPanel userProcessContainer, TravelAgency travelAgency) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.travelAgency = travelAgency;
        populateTable();
        intitialComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        FlightsTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        bookSeatButton = new javax.swing.JButton();
        fromComboBox = new javax.swing.JComboBox();
        toComboBox = new javax.swing.JComboBox();
        backButtonViewAllPlanes = new javax.swing.JButton();
        searchByAirlineButton = new javax.swing.JButton();
        airlinesComboBox = new javax.swing.JComboBox();
        refreshButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 102, 102));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        setPreferredSize(new java.awt.Dimension(1200, 500));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(55, 96, 128));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Flights for Booking");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 610, -1));

        FlightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airline", "Flight Id", "Date", "Time", "From", "To", "Price/Seat", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(FlightsTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 120, 770, 220));

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel2.setText("From");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, 60, 20));

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel3.setText("To");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, 60, 23));
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 282, -1, -1));

        jLabel4.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel4.setText("Date");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 60, -1));

        searchButton.setBackground(new java.awt.Color(0, 0, 0));
        searchButton.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        searchButton.setText("Search Flights");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        add(searchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 380, 200, 60));

        bookSeatButton.setBackground(new java.awt.Color(0, 0, 0));
        bookSeatButton.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        bookSeatButton.setText("Select Seats");
        bookSeatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookSeatButtonActionPerformed(evt);
            }
        });
        add(bookSeatButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 380, 190, 60));

        fromComboBox.setBackground(new java.awt.Color(171, 204, 67));
        fromComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(fromComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 160, 80, -1));

        toComboBox.setBackground(new java.awt.Color(171, 204, 67));
        toComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(toComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 200, 80, -1));

        backButtonViewAllPlanes.setBackground(new java.awt.Color(51, 51, 51));
        backButtonViewAllPlanes.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        backButtonViewAllPlanes.setText("Back");
        backButtonViewAllPlanes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonViewAllPlanesActionPerformed(evt);
            }
        });
        add(backButtonViewAllPlanes, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 35, 100, 30));

        searchByAirlineButton.setBackground(new java.awt.Color(0, 0, 0));
        searchByAirlineButton.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        searchByAirlineButton.setText("Search By Airline");
        searchByAirlineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByAirlineButtonActionPerformed(evt);
            }
        });
        add(searchByAirlineButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, 230, -1));

        airlinesComboBox.setBackground(new java.awt.Color(171, 204, 67));
        airlinesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(airlinesComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 290, 150, -1));

        refreshButton.setBackground(new java.awt.Color(0, 0, 0));
        refreshButton.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        add(refreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 380, 200, 60));
    }// </editor-fold>//GEN-END:initComponents
    private void intitialComboBox() {
        jXDatePicker1.getEditor().setEnabled(false);

        fromComboBox.removeAllItems();
        toComboBox.removeAllItems();
        airlinesComboBox.removeAllItems();
        Map<String, Airline> airline = travelAgency.getListOfAirline();
        airline.entrySet().forEach((e) -> {
            airlinesComboBox.addItem(e.getValue().getNameOfAirline());
        });

        for (FleetSchedule fs : travelAgency.getSchedule().getListOfFlightSchedules()) {
            for (PlaneDetails f : fs.getListOfFlight()) {

                fromComboBox.addItem(f.getDepaturePort());
                toComboBox.addItem(f.getDestinationPort());
            }
        }

    }

    public void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) FlightsTable.getModel();
        dtm.setRowCount(0);
        for (FleetSchedule fs : travelAgency.getSchedule().getListOfFlightSchedules()) {
            for (PlaneDetails f : fs.getListOfFlight()) {
                Object row[] = new Object[8];
                row[0] = f;
                row[1] = f.getFlightId();
                row[2] = f.getDepatureDate();
                row[3] = f.getDepatureTime();
                row[4] = f.getDepaturePort();
                row[5] = f.getDestinationPort();
                row[6] = f.getPriceOfSeat();
                if (f.isCancelFlag()) {
                    row[7] = "Canceled";
                } else {
                    row[7] = "Available";
                    dtm.addRow(row);
                }

            }
        }

    }


    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        try {

            if (jXDatePicker1.getDate() == null) {
                JOptionPane.showMessageDialog(null, "Please select correct date format", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Date date = jXDatePicker1.getDate();
            SimpleDateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");
            Date currdate = (Date) dateFormat.parse(dateFormat.format(new Date()));
            byte flag = 0;
            if ((date.equals(currdate)) || (date.after(currdate))) {
                DefaultTableModel dtm = (DefaultTableModel) FlightsTable.getModel();
                dtm.setRowCount(0);
                for (FleetSchedule fs : travelAgency.getSchedule().getListOfFlightSchedules()) {
                    for (PlaneDetails f : fs.getListOfFlight()) {
                        if ((((f.getDepaturePort()).toLowerCase()).matches((fromComboBox.getSelectedItem().toString()).toLowerCase()))
                                && (((f.getDestinationPort()).toLowerCase()).matches((toComboBox.getSelectedItem().toString()).toLowerCase()))) {
                            Date date1 = f.getDepatureDate();
                            if (((date1.equals(date)))) {
                                flag = 2;
                                Object row[] = new Object[8];
                                row[0] = f;
                                row[1] = f.getFlightId();
                                row[2] = f.getDepatureDate();
                                row[3] = f.getDepatureTime();
                                row[4] = f.getDepaturePort();
                                row[5] = f.getDestinationPort();
                                row[6] = f.getPriceOfSeat();
                                if (f.isCancelFlag()) {
                                    row[7] = "Canceled";
                                } else {
                                    row[7] = "Available";
                                }
                                dtm.addRow(row);
                            }
                        }
                    }
                    
                        TableRowSorter<TableModel> sorter = new TableRowSorter<>(FlightsTable.getModel());
                        FlightsTable.setRowSorter(sorter);
                        List<RowSorter.SortKey> sortKeys = new ArrayList<>(); 
                        int columnIndexToSort = 6;
                        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));
                        sorter.setSortKeys(sortKeys);
                        sorter.sort();
                         JOptionPane.showMessageDialog(null, "First flight in the table is the cheapest and best flight");
                }
                if (flag != 2) {
                    JOptionPane.showMessageDialog(null, "Sorry No Flights are schedule on or after this date", "Information", 3);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please Enter Todays or future Date and time", "Error", 0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter date in MM-dd-yyyy & Time in HH:mm(24 hrs) format ", "Error", 0);
            e.printStackTrace();
        }


    }//GEN-LAST:event_searchButtonActionPerformed

    private void bookSeatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookSeatButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = FlightsTable.getSelectedRow();
        if (selectedRow < 0)
            JOptionPane.showMessageDialog(null, "Please select a row");
        else {
            PlaneDetails planeDetails = (PlaneDetails) FlightsTable.getValueAt(selectedRow, 0);
            SeatBooking seatBooking = new SeatBooking(travelAgency, userProcessContainer, planeDetails);
            userProcessContainer.add("AddingAirplane", seatBooking);
            CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
            cardLayout.next(userProcessContainer);
        }
    }//GEN-LAST:event_bookSeatButtonActionPerformed

    private void backButtonViewAllPlanesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonViewAllPlanesActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backButtonViewAllPlanesActionPerformed

    private void searchByAirlineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByAirlineButtonActionPerformed
        Boolean flag = false;
        for (FleetSchedule fs : travelAgency.getSchedule().getListOfFlightSchedules()) {
            for (PlaneDetails f : fs.getListOfFlight()) {

                if (f.getAirplane().getAirline().equals(airlinesComboBox.getSelectedItem().toString())) {
                    DefaultTableModel dtm = (DefaultTableModel) FlightsTable.getModel();
                    dtm.setRowCount(0);
                    Object row[] = new Object[8];
                    row[0] = f;
                    row[1] = f.getFlightId();
                    row[2] = f.getDepatureDate();
                    row[3] = f.getDepatureTime();
                    row[4] = f.getDepaturePort();
                    row[5] = f.getDestinationPort();
                    row[6] = f.getPriceOfSeat();
                    if (f.isCancelFlag()) {
                        row[7] = "Canceled";
                    } else {
                        row[7] = "Available";
                    }

                    dtm.addRow(row);
                    flag = true;

                } else {

                }
            }
        }

        if (!flag) {
            JOptionPane.showMessageDialog(null, "No Flight found for given airline", "No Flight Found", JOptionPane.NO_OPTION);
        }
    }//GEN-LAST:event_searchByAirlineButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_refreshButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable FlightsTable;
    private javax.swing.JComboBox airlinesComboBox;
    private javax.swing.JButton backButtonViewAllPlanes;
    private javax.swing.JButton bookSeatButton;
    private javax.swing.JComboBox fromComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchByAirlineButton;
    private javax.swing.JComboBox toComboBox;
    // End of variables declaration//GEN-END:variables
}
